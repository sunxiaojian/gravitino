{{- /*
    Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
  "License"); you may not use this file except in compliance
  with the License.  You may obtain a copy of the License at
  
  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing,
  software distributed under the License is distributed on an
  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, either express or implied.  See the License for the
  specific language governing permissions and limitations
  under the License.
  */}}

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "gravitino.fullname" . }}
  namespace: {{ include "gravitino.namespace" . }}
  labels:
    {{- include "gravitino.labels" . | nindent 4 }}
  annotations:
    {{- toYaml .Values.annotations | nindent 4 }}
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app: {{ include "gravitino.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ include "gravitino.name" . }}
        name: {{ include "gravitino.fullname" . }}
        release: {{ .Release.Name }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      annotations:
        {{- with .Values.podAnnotations }}
          {{- toYaml . | nindent 8 }}
          {{- end }}
    spec:
      {{- with .Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      initContainers:
        - name: sqlfile
          image: {{ include "gravitino.image" . }}
          imagePullPolicy: "{{ .Values.image.pullPolicy }}"
          command:
            - /bin/bash
            - -c
            - |
              cp -r /root/gravitino/scripts/*  /tmp/scripts/
              VERSION=$(ls /root/gravitino/libs/gravitino-server-* | grep -oP '[0-9]+\.[0-9]+\.[0-9]+'|head -1)
              echo $VERSION > /tmp/scripts/version.txt
          resources:
          {{- toYaml .Values.initResources | nindent 10 }}
          volumeMounts:
            - mountPath: /tmp/scripts/
              name: scripts-emptydir
      {{- if .Values.mysql.enabled }}
        - name: init-mysql
          image: {{ include "init-mysql.image" . }}
          imagePullPolicy: "{{ .Values.image.pullPolicy }}"
          command:
            - /bin/bash
            - -c
            - |
              while ! mysql -h {{ .Release.Name }}-mysql -u root -e "SELECT 1"; do
                echo "Waiting for MySQL to be ready..."
                sleep 2
              done
              VERSION=$(cat /scripts/version.txt)
              if [ -z "$VERSION" ]; then
                echo "ERROR:Please set VERSION"
                exit 1
              fi
              dir="/scripts/mysql"
              schema_file=$(ls $dir/schema-*-mysql.sql | sort -V | awk -F'[-]' '$2 <= '$VERSION' {print $0}' | tail -n 1)
              if [ ! -f "$schema_file" ]; then
                echo "ERROR:Failed to find schema file $schema_file"
                exit 1
              fi
              upgrade_file=$(ls $dir/upgrade-*-to-*-mysql.sql | sort -V | awk -F'[-]' '$4 <= '$VERSION' {print $0}' | tail -n 1)
              if [ ! -f "$upgrade_file" ]; then
                echo "ERROR:Failed to find upgrade file $upgrade_file"
                exit 1
              fi
              echo "Schema file: $schema_file"
              echo "Upgrade file: $upgrade_file"
              if ! mysql -h {{ .Release.Name }}-mysql -u root -D gravitino <"$upgrade_file"; then
                echo "WARNING: Upgrade script failed: $upgrade_file" >&2
                echo "Continuing with schema script..." >&2
              fi
              mysql -h {{ .Release.Name }}-mysql -u root -D gravitino <$schema_file
          resources:
          {{- toYaml .Values.initResources | nindent 10 }}
          env:
            - name: MYSQL_PWD
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-mysql
                  key: mysql-root-password
          volumeMounts:
            - mountPath: /scripts
              name: scripts-emptydir
      {{- end }}
      containers:
        - name: {{ include "gravitino.name" . }}
          image: {{ include "gravitino.image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
          command:
            - "/bin/bash"
            - "/tmp/conf/init.sh"
          livenessProbe:
            {{- toYaml .Values.livenessProbe | nindent 12 }}
          readinessProbe:
            {{- toYaml .Values.readinessProbe | nindent 12 }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          securityContext:
            {{- toYaml .Values.containerSecurityContext | nindent 12 }}
        {{- if or .Values.env .Values.envWithTpl }}
          env:
          {{- with .Values.env }}
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- range $item := .Values.envWithTpl }}
            - name: {{ $item.name }}
              value: {{ tpl $item.value $ | quote }}
          {{- end }}
        {{- end }}
        {{- if .Values.envFrom }}
          envFrom:
            {{- toYaml .Values.envFrom | nindent 12 }}
        {{- end }}
          ports:
            - name: {{ .Values.service.portName }}
              containerPort: {{ .Values.service.targetPort }}
              protocol: TCP
            {{- if .Values.extraExposePorts }}
            {{- range $item := .Values.extraExposePorts }}
            - name: {{ $item.name }}
              containerPort: {{ $item.targetPort }}
              protocol: {{ $item.protocol }}
            {{- end }}
            {{- end }}
          volumeMounts:
            - name: gravitino-conf
              mountPath: /tmp/conf
            - name: storage
              mountPath: {{ .Values.entity.storagePath }}
        {{- if .Values.extraVolumeMounts }}
              {{- toYaml .Values.extraVolumeMounts | nindent 12 }}
            {{- end }}
        {{- if .Values.icebergRest.extraVolumeMounts }}
              {{- toYaml .Values.icebergRest.extraVolumeMounts | nindent 12 }}
            {{- end }}
        {{- if .Values.icebergRest.log4j2Properties }}
            - name: iceberg-rest-log4j2-config
              mountPath: /tmp/iceberg-rest-conf/log4j2.properties
              subPath: log4j2.properties
        {{- end }}
        {{- if or .Values.icebergRest.coreSiteProperties .Values.icebergRest.hdfsSiteProperties }}
            - name: iceberg-rest-hadoop-config
              mountPath: /tmp/iceberg-rest-conf/hadoop/
        {{- end }}
        {{- if and .Values.icebergRest.readinessProbe.enabled .Values.icebergRest.livenessProbe.enabled }}
        # Iceberg REST health check sidecar container
        - name: iceberg-rest-health-check
          image: curlimages/curl:latest
          imagePullPolicy: IfNotPresent
          command:
            - /bin/sh
            - -c
            - |
              while true; do
                sleep 30
              done
          {{- if .Values.icebergRest.readinessProbe.enabled }}
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - |
                  curl -f http://localhost:{{ .Values.icebergRest.httpPort | default 9001 }}/iceberg/v1/config
            initialDelaySeconds: {{ .Values.icebergRest.readinessProbe.initialDelaySeconds | default 30 }}
            timeoutSeconds: {{ .Values.icebergRest.readinessProbe.timeoutSeconds | default 5 }}
            periodSeconds: {{ .Values.icebergRest.readinessProbe.periodSeconds | default 10 }}
            successThreshold: {{ .Values.icebergRest.readinessProbe.successThreshold | default 1 }}
            failureThreshold: {{ .Values.icebergRest.readinessProbe.failureThreshold | default 3 }}
          {{- end }}
          {{- if .Values.icebergRest.livenessProbe.enabled }}
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - |
                  curl -f http://localhost:{{ .Values.icebergRest.httpPort | default 9001 }}/iceberg/v1/config
            initialDelaySeconds: {{ .Values.icebergRest.livenessProbe.initialDelaySeconds | default 60 }}
            timeoutSeconds: {{ .Values.icebergRest.livenessProbe.timeoutSeconds | default 5 }}
            periodSeconds: {{ .Values.icebergRest.livenessProbe.periodSeconds | default 30 }}
            successThreshold: {{ .Values.icebergRest.livenessProbe.successThreshold | default 1 }}
            failureThreshold: {{ .Values.icebergRest.livenessProbe.failureThreshold | default 3 }}
          {{- end }}
          resources:
            limits:
              cpu: 50m
              memory: 64Mi
            requests:
              cpu: 10m
              memory: 32Mi
        {{- end }}
      nodeSelector:
        {{- toYaml .Values.nodeSelector | nindent 8 }}
        {{- if .Values.icebergRest.nodeSelector }}
        {{- toYaml .Values.icebergRest.nodeSelector | nindent 8 }}
        {{- end }}
      affinity:
        {{- toYaml .Values.affinity | nindent 8 }}
        {{- if .Values.icebergRest.affinity }}
        {{- toYaml .Values.icebergRest.affinity | nindent 8 }}
        {{- end }}
      tolerations:
        {{- toYaml .Values.tolerations | nindent 8 }}
        {{- if .Values.icebergRest.tolerations }}
        {{- toYaml .Values.icebergRest.tolerations | nindent 8 }}
        {{- end }}
      volumes:
        - name: gravitino-conf
          configMap:
            name: {{ include "gravitino.fullname" . }}
        - emptyDir: {}
          name: scripts-emptydir
        {{- if not .Values.persistence.enabled }}
        - name: storage
          emptyDir: {}
        {{- else if .Values.persistence.existingClaim }}
        - name: storage
          persistentVolumeClaim:
            claimName: {{ .Values.persistence.existingClaim }}
        {{- else }}
        volumeClaimTemplates:
          - metadata:
              name: storage
              labels:
                {{- toYaml .Values.persistence.labels | nindent 8 }}
              annotations:
                {{- toYaml .Values.persistence.annotations | nindent 8 }}
            spec:
              accessModes:
                {{- toYaml .Values.persistence.accessModes | nindent 8 }}
              resources:
                requests:
                  storage: {{ .Values.persistence.size | quote }}
              storageClassName: {{ .Values.persistence.storageClassName }}
        {{- end }}
        {{- if .Values.extraVolumes }}
          {{- toYaml .Values.extraVolumes | nindent 8 }}
        {{- end }}
        {{- if .Values.icebergRest.extraVolumes }}
          {{- toYaml .Values.icebergRest.extraVolumes | nindent 8 }}
        {{- end }}
        {{- if .Values.icebergRest.log4j2Properties }}
          - name: iceberg-rest-log4j2-config
            configMap:
              name: {{ include "gravitino.fullname" . }}-iceberg-rest-log4j2
        {{- end }}
        {{- if or .Values.icebergRest.coreSiteProperties .Values.icebergRest.hdfsSiteProperties }}
          - name: iceberg-rest-hadoop-config
            configMap:
              name: {{ include "gravitino.fullname" . }}-iceberg-rest-hadoop
        {{- end }}